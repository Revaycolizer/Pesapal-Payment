// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)


}

enum UserRole {
  ADMIN
  USER
  SELLER
  TRUSTED_SELLER
}

enum UserState {
  BLOCKED
  NON_BLOCKED
}

enum PState {
  INSTOCK
  OUTOFSTOCK
}

enum Trend {
  TRENDING
  NON_TRENDING
}

enum Status {
  REACHED
  SHIPPING
}

enum PCat {
  SMARTPHONES
  GAMING_DEVICES
  PRINTERS
  HEADPHONES
  CLOTHES
  SHOES
  FURNITURES
  ELECTRONICS
  WATCHES
}

model User {
  id             String     @id @default(cuid())
  name           String?
  hashedPassword String?
  email          String?    @unique
  emailVerified  DateTime?
  products       Product[]
  image          String?
  role           UserRole   @default(USER)
  ustate         UserState  @default(NON_BLOCKED)
  accounts       Account[]
  sessions       Session[]
  banners        Banner[]
  comments       Comment[]
  likes          Like[]
  wishlists      Wishlist[]
  categories     Category[]
  deliveries     Delivery[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

}

model Product {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  src         String
  srcname     String
  name        String    @unique
  description String
  category    PCat      @default(SMARTPHONES)
  price       String
  rating      String?
  trend       Trend     @default(NON_TRENDING)
  pstate      PState    @default(INSTOCK)
  comments    Comment[]
  likes       Like[]


}

model Banner {
  id        String   @id @default(cuid())
  bheader   String
  sheader   String
  imageUrl  String
  imageName String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

 
}

model Wishlist {
  id          String   @id @default(cuid())
  productId   String
  price       String
  name        String
  description String
  src         String
  rating      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  wishlisted  Boolean  @default(true)
  user        User     @relation(fields: [userId], references: [id])


}

model Category {
  id          String   @id @default(cuid())
  src         String
  name        String
  srcname     String
  description String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

 
}

model Delivery {
  id        String   @id @default(cuid())
  name      String
  amount    String
  price     String
  src       String
  status    Status   @default(SHIPPING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
   user        User     @relation(fields: [userId], references: [id])

}

model Like {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  productId String
  content   String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([productId])
}
